// Code generated by Prisma (prisma@1.21.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  pushNotifications: (where?: pushNotificationsWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  pushNotifications: (
    where: pushNotificationsWhereUniqueInput
  ) => pushNotificationsPromise;
  pushNotificationses: (
    args?: {
      where?: pushNotificationsWhereInput;
      orderBy?: pushNotificationsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<pushNotifications>;
  pushNotificationsesConnection: (
    args?: {
      where?: pushNotificationsWhereInput;
      orderBy?: pushNotificationsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => pushNotificationsConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createpushNotifications: (
    data: pushNotificationsCreateInput
  ) => pushNotificationsPromise;
  updatepushNotifications: (
    args: {
      data: pushNotificationsUpdateInput;
      where: pushNotificationsWhereUniqueInput;
    }
  ) => pushNotificationsPromise;
  updateManypushNotificationses: (
    args: {
      data: pushNotificationsUpdateManyMutationInput;
      where?: pushNotificationsWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertpushNotifications: (
    args: {
      where: pushNotificationsWhereUniqueInput;
      create: pushNotificationsCreateInput;
      update: pushNotificationsUpdateInput;
    }
  ) => pushNotificationsPromise;
  deletepushNotifications: (
    where: pushNotificationsWhereUniqueInput
  ) => pushNotificationsPromise;
  deleteManypushNotificationses: (
    where?: pushNotificationsWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  pushNotifications: (
    where?: pushNotificationsSubscriptionWhereInput
  ) => pushNotificationsSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type pushNotificationsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "token_ASC"
  | "token_DESC"
  | "platform_ASC"
  | "platform_DESC"
  | "timezoneOffset_ASC"
  | "timezoneOffset_DESC"
  | "receiveNotifications_ASC"
  | "receiveNotifications_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface pushNotificationsCreateInput {
  token: String;
  platform?: String;
  timezoneOffset?: Int;
  receiveNotifications?: Boolean;
}

export interface pushNotificationsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  platform?: String;
  platform_not?: String;
  platform_in?: String[] | String;
  platform_not_in?: String[] | String;
  platform_lt?: String;
  platform_lte?: String;
  platform_gt?: String;
  platform_gte?: String;
  platform_contains?: String;
  platform_not_contains?: String;
  platform_starts_with?: String;
  platform_not_starts_with?: String;
  platform_ends_with?: String;
  platform_not_ends_with?: String;
  timezoneOffset?: Int;
  timezoneOffset_not?: Int;
  timezoneOffset_in?: Int[] | Int;
  timezoneOffset_not_in?: Int[] | Int;
  timezoneOffset_lt?: Int;
  timezoneOffset_lte?: Int;
  timezoneOffset_gt?: Int;
  timezoneOffset_gte?: Int;
  receiveNotifications?: Boolean;
  receiveNotifications_not?: Boolean;
  AND?: pushNotificationsWhereInput[] | pushNotificationsWhereInput;
  OR?: pushNotificationsWhereInput[] | pushNotificationsWhereInput;
  NOT?: pushNotificationsWhereInput[] | pushNotificationsWhereInput;
}

export interface pushNotificationsUpdateInput {
  token?: String;
  platform?: String;
  timezoneOffset?: Int;
  receiveNotifications?: Boolean;
}

export interface pushNotificationsUpdateManyMutationInput {
  token?: String;
  platform?: String;
  timezoneOffset?: Int;
  receiveNotifications?: Boolean;
}

export interface pushNotificationsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: pushNotificationsWhereInput;
  AND?:
    | pushNotificationsSubscriptionWhereInput[]
    | pushNotificationsSubscriptionWhereInput;
  OR?:
    | pushNotificationsSubscriptionWhereInput[]
    | pushNotificationsSubscriptionWhereInput;
  NOT?:
    | pushNotificationsSubscriptionWhereInput[]
    | pushNotificationsSubscriptionWhereInput;
}

export type pushNotificationsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  token?: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface AggregatepushNotifications {
  count: Int;
}

export interface AggregatepushNotificationsPromise
  extends Promise<AggregatepushNotifications>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatepushNotificationsSubscription
  extends Promise<AsyncIterator<AggregatepushNotifications>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface pushNotificationsPreviousValues {
  id: ID_Output;
  token: String;
  platform?: String;
  timezoneOffset?: Int;
  receiveNotifications: Boolean;
}

export interface pushNotificationsPreviousValuesPromise
  extends Promise<pushNotificationsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  token: () => Promise<String>;
  platform: () => Promise<String>;
  timezoneOffset: () => Promise<Int>;
  receiveNotifications: () => Promise<Boolean>;
}

export interface pushNotificationsPreviousValuesSubscription
  extends Promise<AsyncIterator<pushNotificationsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  token: () => Promise<AsyncIterator<String>>;
  platform: () => Promise<AsyncIterator<String>>;
  timezoneOffset: () => Promise<AsyncIterator<Int>>;
  receiveNotifications: () => Promise<AsyncIterator<Boolean>>;
}

export interface pushNotificationsEdge {
  cursor: String;
}

export interface pushNotificationsEdgePromise
  extends Promise<pushNotificationsEdge>,
    Fragmentable {
  node: <T = pushNotificationsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface pushNotificationsEdgeSubscription
  extends Promise<AsyncIterator<pushNotificationsEdge>>,
    Fragmentable {
  node: <T = pushNotificationsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface pushNotificationsSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface pushNotificationsSubscriptionPayloadPromise
  extends Promise<pushNotificationsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = pushNotificationsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = pushNotificationsPreviousValuesPromise>() => T;
}

export interface pushNotificationsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<pushNotificationsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = pushNotificationsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = pushNotificationsPreviousValuesSubscription>() => T;
}

export interface pushNotifications {
  id: ID_Output;
  token: String;
  platform?: String;
  timezoneOffset?: Int;
  receiveNotifications: Boolean;
}

export interface pushNotificationsPromise
  extends Promise<pushNotifications>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  token: () => Promise<String>;
  platform: () => Promise<String>;
  timezoneOffset: () => Promise<Int>;
  receiveNotifications: () => Promise<Boolean>;
}

export interface pushNotificationsSubscription
  extends Promise<AsyncIterator<pushNotifications>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  token: () => Promise<AsyncIterator<String>>;
  platform: () => Promise<AsyncIterator<String>>;
  timezoneOffset: () => Promise<AsyncIterator<Int>>;
  receiveNotifications: () => Promise<AsyncIterator<Boolean>>;
}

export interface pushNotificationsConnection {}

export interface pushNotificationsConnectionPromise
  extends Promise<pushNotificationsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<pushNotificationsEdge>>() => T;
  aggregate: <T = AggregatepushNotificationsPromise>() => T;
}

export interface pushNotificationsConnectionSubscription
  extends Promise<AsyncIterator<pushNotificationsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<pushNotificationsEdgeSubscription>>>() => T;
  aggregate: <T = AggregatepushNotificationsSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "pushNotifications",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/subramanya-chakravarthy-aa7caa/notifications/dev`
});
export const prisma = new Prisma();
